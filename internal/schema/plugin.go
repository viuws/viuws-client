// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"

type WorkflowExportPluginInstance struct {
	// ExportFunction corresponds to the JSON schema field "exportFunction".
	ExportFunction interface{} `json:"exportFunction"`

	// ExportMenuItem corresponds to the JSON schema field "exportMenuItem".
	ExportMenuItem string `json:"exportMenuItem"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`

	// Type corresponds to the JSON schema field "type".
	Type interface{} `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WorkflowExportPluginInstance) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["exportFunction"]; !ok || v == nil {
		return fmt.Errorf("field exportFunction in WorkflowExportPluginInstance: required")
	}
	if v, ok := raw["exportMenuItem"]; !ok || v == nil {
		return fmt.Errorf("field exportMenuItem in WorkflowExportPluginInstance: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in WorkflowExportPluginInstance: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in WorkflowExportPluginInstance: required")
	}
	type Plain WorkflowExportPluginInstance
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WorkflowExportPluginInstance(plain)
	return nil
}

type WorkflowImportPluginInstance struct {
	// ImportFunction corresponds to the JSON schema field "importFunction".
	ImportFunction interface{} `json:"importFunction"`

	// ImportMenuItem corresponds to the JSON schema field "importMenuItem".
	ImportMenuItem string `json:"importMenuItem"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`

	// Type corresponds to the JSON schema field "type".
	Type interface{} `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WorkflowImportPluginInstance) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["importFunction"]; !ok || v == nil {
		return fmt.Errorf("field importFunction in WorkflowImportPluginInstance: required")
	}
	if v, ok := raw["importMenuItem"]; !ok || v == nil {
		return fmt.Errorf("field importMenuItem in WorkflowImportPluginInstance: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in WorkflowImportPluginInstance: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in WorkflowImportPluginInstance: required")
	}
	type Plain WorkflowImportPluginInstance
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WorkflowImportPluginInstance(plain)
	return nil
}

type PluginJson struct {
	// Plugin corresponds to the JSON schema field "plugin".
	Plugin interface{} `json:"plugin"`

	// SchemaVersion corresponds to the JSON schema field "schemaVersion".
	SchemaVersion string `json:"schemaVersion,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PluginJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["plugin"]; !ok || v == nil {
		return fmt.Errorf("field plugin in PluginJson: required")
	}
	type Plain PluginJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["schemaVersion"]; !ok || v == nil {
		plain.SchemaVersion = "1.0.0"
	}
	*j = PluginJson(plain)
	return nil
}
