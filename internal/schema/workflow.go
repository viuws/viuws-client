// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"

type Environment struct {
	// BaseDir corresponds to the JSON schema field "baseDir".
	BaseDir string `json:"baseDir"`

	// DataMappings corresponds to the JSON schema field "dataMappings".
	DataMappings EnvironmentDataMappings `json:"dataMappings,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`
}

type EnvironmentDataMappings map[string]string

type ModuleConfig struct {
	// Args corresponds to the JSON schema field "args".
	Args []string `json:"args,omitempty"`

	// Env corresponds to the JSON schema field "env".
	Env ModuleConfigEnv `json:"env,omitempty"`

	// Inputs corresponds to the JSON schema field "inputs".
	Inputs ModuleConfigInputs `json:"inputs,omitempty"`

	// Outputs corresponds to the JSON schema field "outputs".
	Outputs ModuleConfigOutputs `json:"outputs,omitempty"`
}

type ModuleConfigEnv map[string]interface{}

type ModuleConfigInputs map[string]string

type ModuleConfigOutputs map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *Environment) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["baseDir"]; !ok || v == nil {
		return fmt.Errorf("field baseDir in Environment: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in Environment: required")
	}
	type Plain Environment
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["dataMappings"]; !ok || v == nil {
		plain.DataMappings = map[string]string{}
	}
	*j = Environment(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ModuleConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain ModuleConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["args"]; !ok || v == nil {
		plain.Args = []string{}
	}
	if v, ok := raw["env"]; !ok || v == nil {
		plain.Env = map[string]interface{}{}
	}
	if v, ok := raw["inputs"]; !ok || v == nil {
		plain.Inputs = map[string]string{}
	}
	if v, ok := raw["outputs"]; !ok || v == nil {
		plain.Outputs = map[string]string{}
	}
	*j = ModuleConfig(plain)
	return nil
}

type Task struct {
	// Environment corresponds to the JSON schema field "environment".
	Environment interface{} `json:"environment,omitempty"`

	// ModuleConfig corresponds to the JSON schema field "moduleConfig".
	ModuleConfig ModuleConfig `json:"moduleConfig"`

	// ModulePath corresponds to the JSON schema field "module_path".
	ModulePath string `json:"module_path"`

	// ModuleRepo corresponds to the JSON schema field "module_repo".
	ModuleRepo interface{} `json:"module_repo,omitempty"`

	// ModuleRev corresponds to the JSON schema field "module_rev".
	ModuleRev interface{} `json:"module_rev,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Task) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["moduleConfig"]; !ok || v == nil {
		return fmt.Errorf("field moduleConfig in Task: required")
	}
	if v, ok := raw["module_path"]; !ok || v == nil {
		return fmt.Errorf("field module_path in Task: required")
	}
	type Plain Task
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Task(plain)
	return nil
}

type WorkflowJson struct {
	// Environments corresponds to the JSON schema field "environments".
	Environments WorkflowJsonEnvironments `json:"environments,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`

	// SchemaVersion corresponds to the JSON schema field "schemaVersion".
	SchemaVersion string `json:"schemaVersion,omitempty"`

	// Tasks corresponds to the JSON schema field "tasks".
	Tasks WorkflowJsonTasks `json:"tasks,omitempty"`
}

type WorkflowJsonEnvironments map[string]Environment

type WorkflowJsonTasks map[string]Task

// UnmarshalJSON implements json.Unmarshaler.
func (j *WorkflowJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in WorkflowJson: required")
	}
	type Plain WorkflowJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["environments"]; !ok || v == nil {
		plain.Environments = WorkflowJsonEnvironments{}
	}
	if v, ok := raw["schemaVersion"]; !ok || v == nil {
		plain.SchemaVersion = "1.0.0"
	}
	if v, ok := raw["tasks"]; !ok || v == nil {
		plain.Tasks = WorkflowJsonTasks{}
	}
	*j = WorkflowJson(plain)
	return nil
}
